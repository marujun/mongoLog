<?xml version="1.0" encoding="utf-8"?>
<sphinx:docset>
        <sphinx:schema>
            <sphinx:field name="subject"/>
            <sphinx:field name="content"/>
            <sphinx:attr name="published" type="timestamp"/>
            <sphinx:attr name="author_id" type="int" bits="16" default="1"/>
        </sphinx:schema>
        <sphinx:document id="1">
        <subject>net.createServer</subject>
        <published>1270131607</published>
        <content>
            Creates a new TCP server. The connectionListener argument is automatically set as a listener for the
            'connection' event.

            options is an object with the following defaults:

            { allowHalfOpen: false
            }
            If allowHalfOpen is true, then the socket won't automatically send a FIN packet when the other end of the
            socket sends a FIN packet.
            The socket becomes non-readable, but still writable.
            You should call the end() method explicitly. See 'end' event for more information.
        </content>
        <author_id>1</author_id>
    </sphinx:document>
    <sphinx:document id="2">
        <subject>net.createConnection</subject>
        <published>1270135548</published>
        <content>
            Constructs a new socket object and opens the socket to the given location. When the socket is established,
            the 'connect' event will be emitted.

            For TCP sockets, options argument should be an object which specifies:

            port: Port the client should connect to (Required).
            host: Host the client should connect to. Defaults to 'localhost'.
            localAddress: Local interface to bind to for network connections.
            For UNIX domain sockets, options argument should be an object which specifies:

            path: Path the client should connect to (Required).
            Common options are:

            allowHalfOpen: if true, the socket won't automatically send a FIN packet when the other end of the socket
            sends a FIN packet. Defaults to false. See 'end' event for more information.
            The connectListener parameter will be added as an listener for the 'connect' event.
        </content>
        <author_id>1</author_id>
    </sphinx:document>
    <sphinx:document id="3">
        <subject>server.listen</subject>
        <published>1270094460</published>
        <content>Begin accepting connections on the specified port and host. If the host is omitted, the server will
            accept connections directed to any IPv4 address (INADDR_ANY). A port value of zero will assign a random
            port.

            Backlog is the maximum length of the queue of pending connections. The actual length will be determined by
            your OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on linux. The default value of
            this parameter is 511 (not 512).

            This function is asynchronous. When the server has been bound, 'listening' event will be emitted. The last
            parameter listeningListener will be added as an listener for the 'listening' event.

            One issue some users run into is getting EADDRINUSE errors. This means that another server is already
            running on the requested port. One way of handling this would be to wait a second and then try again. This
            can be done with
        </content>
        <author_id>2</author_id>
    </sphinx:document>
</sphinx:docset>